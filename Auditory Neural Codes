import numpy as np

class AuditoryNeuralCode:
    def __init__(self, sampling_rate=44100, num_neurons=100):
        self.sampling_rate = sampling_rate
        self.num_neurons = num_neurons
        self.neuron_responses = np.zeros((num_neurons,))

    def encode_sound(self, sound_signal):
        # Normalize the sound signal
        normalized_signal = self.normalize_signal(sound_signal)
        
        # Calculate neuron responses based on frequency bands
        frequency_bands = self.get_frequency_bands(normalized_signal)
        self.neuron_responses = self.calculate_neuron_responses(frequency_bands)

    def normalize_signal(self, signal):
        max_amplitude = np.max(np.abs(signal))
        if max_amplitude > 0:
            return signal / max_amplitude
        return signal

    def get_frequency_bands(self, signal):
        # Perform a Fourier Transform to get frequency components
        spectrum = np.fft.fft(signal)
        frequencies = np.fft.fftfreq(len(signal), 1/self.sampling_rate)
        
        # Create frequency bands
        band_edges = np.linspace(0, self.sampling_rate/2, self.num_neurons + 1)
        frequency_bands = np.zeros(self.num_neurons)

        for i in range(self.num_neurons):
            band_mask = (frequencies >= band_edges[i]) & (frequencies < band_edges[i + 1])
            frequency_bands[i] = np.sum(np.abs(spectrum[band_mask]))
        
        return frequency_bands

    def calculate_neuron_responses(self, frequency_bands):
        # Simulate neuron firing rates based on frequency bands
        return frequency_bands / np.max(frequency_bands) if np.max(frequency_bands) > 0 else frequency_bands

    def get_neuron_responses(self):
        return self.neuron_responses

# Example usage
if __name__ == "__main__":
    # Generate a sample sound signal (sine wave)
    duration = 1.0  # seconds
    frequency = 440  # Hz (A4 note)
    t = np.linspace(0, duration, int(44100 * duration), endpoint=False)
    sound_signal = 0.5 * np.sin(2 * np.pi * frequency * t)

    # Create an auditory neural code instance and encode the sound signal
    auditory_code = AuditoryNeuralCode()
    auditory_code.encode_sound(sound_signal)

    # Get and display neuron responses
    responses = auditory_code.get_neuron_responses()
    print("Neuron Responses:", responses)
